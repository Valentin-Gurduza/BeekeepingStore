@model List<eUseControl.BeekeepingStore.Models.Product>

@{
    ViewBag.Title = "Wishlist";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container py-5">
    <div class="section-title text-center mb-5">
        <h1>My Wishlist</h1>
        <p class="text-muted">Products you've saved for later</p>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Wishlist products -->
    <div class="row g-4">
        @if (Model.Count == 0)
        {
            <div class="col-12 text-center py-5">
                <div class="alert alert-info">
                    <i class="fas fa-heart-broken fa-2x mb-3"></i>
                    <h4>Your wishlist is empty</h4>
                    <p>You haven't saved any products to your wishlist yet.</p>
                    <a href="@Url.Action("Products", "Home")" class="btn btn-primary mt-3">
                        <i class="fas fa-shopping-basket"></i> Explore our products
                    </a>
                </div>
            </div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table wishlist-table">
                    <thead>
                        <tr>
                            <th scope="col" style="width: 15%">Product</th>
                            <th scope="col" style="width: 40%">Details</th>
                            <th scope="col" style="width: 15%">Price</th>
                            <th scope="col" style="width: 15%">Date Added</th>
                            <th scope="col" style="width: 15%">Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var product in Model)
                        {
                            <tr>
                                <td>
                                    <img src="@Url.Content(product.Image)" alt="@product.Name" class="img-fluid"
                                         style="max-width: 100px; max-height: 100px;"
                                         onerror="this.src='@Url.Content("~/Content/Images/products/beehive.jpg")'">
                                </td>
                                <td>
                                    <h5>@product.Name</h5>
                                    <p class="text-muted">@(string.IsNullOrEmpty(product.Category) ? "Miscellaneous" : product.Category)</p>
                                    <p class="small text-truncate">@product.Description</p>
                                </td>
                                <td>
                                    <h5 class="text-primary">@product.Price.ToString("C", new System.Globalization.CultureInfo("ro-MD"))</h5>
                                </td>
                                <td>
                                    <span class="text-muted">@product.DateAdded.ToString("dd MMMM yyyy", new System.Globalization.CultureInfo("ro-MD"))</span>
                                </td>
                                <td>
                                    <div class="d-flex flex-column gap-2">
                                        @using (Html.BeginForm("Remove", "Wishlist", FormMethod.Post))
                                        {
                                            @Html.AntiForgeryToken()
                                            <input type="hidden" name="productId" value="@product.Id" />
                                            <input type="hidden" name="returnUrl" value="@Request.Url.PathAndQuery" />
                                            <button type="submit" class="btn btn-outline-danger btn-sm">
                                                <i class="fas fa-heart-broken"></i> Remove
                                            </button>
                                        }
                                        <button class="btn btn-primary btn-sm add-to-cart-btn"
                                                data-product-id="@product.Id"
                                                data-product-name="@product.Name"
                                                data-product-price="@product.Price"
                                                data-product-image="@Url.Content(product.Image)">
                                            <i class="fas fa-shopping-cart"></i> Add to Cart
                                        </button>
                                    </div>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@section scripts {
    <script>
        $(document).ready(function () {
            // Script for adding products to cart
            $('.add-to-cart-btn').on('click', function (e) {
                // Prevent multiple execution of the event
                e.preventDefault();

                // Temporarily disable the button to prevent multiple clicks
                var $button = $(this);
                if ($button.prop('disabled')) {
                    console.log('Button is already disabled, ignoring click');
                    return;
                }

                $button.prop('disabled', true);

                var productId = String($button.data('product-id'));
                var productName = $button.data('product-name');
                var productPrice = $button.data('product-price');
                var productImage = $button.data('product-image');

                // Check and correct the image path if needed
                if (!productImage || productImage === '' || productImage === 'undefined') {
                    productImage = '/Content/Images/products/beehive.jpg';
                }

                // DIRECT CART MANIPULATION BYPASSING addToCart FUNCTION
                // This prevents notification overlap
                try {
                    // Get current cart
                    var cart = JSON.parse(localStorage.getItem('cart') || '[]');

                    // Check if the product already exists and remove it
                    var existingProductIndex = -1;
                    for (var i = 0; i < cart.length; i++) {
                        if (String(cart[i].id) === productId) {
                            existingProductIndex = i;
                            break;
                        }
                    }

                    // If the product exists, remove it
                    if (existingProductIndex !== -1) {
                        cart.splice(existingProductIndex, 1);
                    }

                    // Add the product with quantity 1
                    cart.push({
                        id: productId,
                        name: productName,
                        price: parseFloat(productPrice),
                        image: productImage,
                        quantity: 1
                    });

                    // Save the cart directly
                    localStorage.setItem('cart', JSON.stringify(cart));
                    console.log('Product directly added to cart:', productName);

                    // Manually update cart badge without triggering any events
                    var cartBadge = document.querySelector('.cart-badge');
                    if (cartBadge) {
                        // Count total items
                        var totalItems = cart.reduce(function (total, item) {
                            return total + (parseInt(item.quantity) || 1);
                        }, 0);

                        cartBadge.textContent = totalItems;

                        if (totalItems > 0) {
                            cartBadge.classList.remove('d-none');
                        }
                    }
                } catch (e) {
                    console.error('Error updating cart:', e);
                }

                // Confirmation animation
                $button.html('<i class="fas fa-check"></i> Added');
                $button.removeClass('btn-primary').addClass('btn-success');

                // Show notification (just once, directly here)
                //showNotification(productName + ' has been added to your cart!', 'success');

                // Reactivate the button after a while
                setTimeout(function () {
                    $button.html('<i class="fas fa-shopping-cart"></i> Add to Cart');
                    $button.removeClass('btn-success').addClass('btn-primary');
                    $button.prop('disabled', false);
                }, 2000);
            });
        });
    </script>
} 