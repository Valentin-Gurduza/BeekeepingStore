@model List<eUseControl.BeekeepingStore.Models.Product>

@{
    ViewBag.Title = "Products";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container py-5">
    <div class="section-title text-center mb-5">
        <h1>Our Products</h1>
        <p class="text-muted">Discover our complete range of beekeeping products</p>
    </div>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success alert-dismissible fade show" role="alert">
            @TempData["SuccessMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["InfoMessage"] != null)
    {
        <div class="alert alert-info alert-dismissible fade show" role="alert">
            @TempData["InfoMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @TempData["ErrorMessage"]
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }

    <!-- Product filters -->
    <div class="row mb-4">
        <div class="col-md-6 mb-3 mb-md-0">
            <div class="input-group">
                <input type="text" class="form-control" id="product-search" placeholder="Search products...">
                <button class="btn btn-primary" id="search-btn" type="button"><i class="fas fa-search"></i></button>
            </div>
        </div>
        <div class="col-md-6">
            <div class="d-flex justify-content-md-end">
                <select class="form-select me-2" id="category-filter" style="max-width: 180px;">
                    <option value="" selected>All Categories</option>
                    <option value="Tools">Tools</option>
                    <option value="Equipment">Equipment</option>
                    <option value="Hives">Hives</option>
                    <option value="Kits">Kits</option>
                </select>
                <select class="form-select" id="sort-products" style="max-width: 150px;">
                    <option value="default" selected>Sort By</option>
                    <option value="price-asc">Price: Low-High</option>
                    <option value="price-desc">Price: High-Low</option>
                    <option value="newest">Newest</option>
                </select>
            </div>
        </div>
    </div>

    <!-- Product list -->
    <div class="row g-4" id="product-list">
        @if (Model.Count == 0)
        {
            <div class="col-12 text-center py-5">
                <div class="alert alert-info">
                    <i class="fas fa-info-circle fa-2x mb-3"></i>
                    <h4>No products available</h4>
                    <p>We couldn't find any products matching your search criteria.</p>
                </div>
            </div>
        }
        else
        {
            foreach (var product in Model)
            {
                <div class="col-lg-3 col-md-4 col-sm-6 product-item"
                     data-category="@(string.IsNullOrEmpty(product.Category) ? "Miscellaneous" : product.Category)"
                     data-name="@product.Name.ToLower()"
                     data-price="@product.Price"
                     data-date="@product.DateAdded.Ticks">
                    <div class="product-card h-100">
                        <div class="product-card-img">
                            @if (Session["UserId"] != null)
                            {
                                <div class="wishlist-icon">
                                    <form action="@Url.Action("Add", "Wishlist")" method="post" class="wishlist-form" data-product-id="@product.Id">
                                        @Html.AntiForgeryToken()
                                        <input type="hidden" name="productId" value="@product.Id" />
                                        <input type="hidden" name="returnUrl" value="@Request.Url.PathAndQuery" />
                                        <button type="submit" class="btn btn-wishlist" title="Add to Wishlist">
                                            <i class="far fa-heart"></i>
                                        </button>
                                    </form>
                                </div>
                            }
                            <img src="@Url.Content(product.Image)"
                                 alt="@product.Name"
                                 class="img-fluid"
                                 onerror="this.src='@Url.Content("~/Content/Images/products/default-product.png")'">
                        </div>
                        <div class="product-card-body">
                            <div class="product-card-category">@(string.IsNullOrEmpty(product.Category) ? "Miscellaneous" : product.Category)</div>
                            <h3 class="product-card-title">@product.Name</h3>
                            <p class="product-card-text text-truncate">@product.Description</p>
                            <div class="product-card-price">@product.Price.ToString("C", new System.Globalization.CultureInfo("ro-MD"))</div>
                            <div class="product-card-footer">
                                <button class="btn btn-primary add-to-cart-btn"
                                        data-product-id="@product.Id"
                                        data-product-name="@product.Name"
                                        data-product-price="@product.Price"
                                        data-product-image="@Url.Content(product.Image)">
                                    <i class="fas fa-shopping-cart"></i> Add to Cart
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        }
    </div>

    <!-- No results message - hidden by default -->
    <div id="no-results" class="col-12 text-center py-5" style="display: none;">
        <div class="alert alert-info">
            <i class="fas fa-info-circle fa-2x mb-3"></i>
            <h4>No products found</h4>
            <p>We couldn't find any products matching your search criteria.</p>
            <button id="reset-filters" class="btn btn-primary mt-3">Reset Filters</button>
        </div>
    </div>
</div>

@section scripts {
    <script>
        // Product filtering script
        $(document).ready(function () {
            // Variables to store the current state
            var searchQuery = '';
            var selectedCategory = '';
            var currentSort = 'default';

            // Function to filter and sort products
            function filterProducts() {
                var visibleProducts = 0;

                // Hide the no results message initially
                $('#no-results').hide();

                // Loop through all products
                $('.product-item').each(function() {
                    var $product = $(this);
                    var productName = $product.data('name');
                    var productCategory = $product.data('category');
                    var matchesSearch = true;
                    var matchesCategory = true;

                    // Apply search filter if search query exists
                    if (searchQuery) {
                        matchesSearch = productName.indexOf(searchQuery.toLowerCase()) !== -1;
                    }

                    // Apply category filter if category is selected
                    if (selectedCategory) {
                        matchesCategory = productCategory === selectedCategory;
                    }

                    // Show or hide based on filters
                    if (matchesSearch && matchesCategory) {
                        $product.show();
                        visibleProducts++;
                    } else {
                        $product.hide();
                    }
                });

                // Show no results message if needed
                if (visibleProducts === 0) {
                    $('#no-results').show();
                }

                // Apply sorting
                sortProducts(currentSort);
            }

            // Function to sort products
            function sortProducts(sortType) {
                var $productList = $('#product-list');
                var $products = $('.product-item:visible').detach();

                // Sort products based on selected option
                $products.sort(function(a, b) {
                    var $a = $(a);
                    var $b = $(b);

                    if (sortType === 'price-asc') {
                        return $a.data('price') - $b.data('price');
                    } else if (sortType === 'price-desc') {
                        return $b.data('price') - $a.data('price');
                    } else if (sortType === 'newest') {
                        return $b.data('date') - $a.data('date');
                    }

                    // Default sorting (as in original DOM)
                    return 0;
                });

                // Append sorted products back to container
                $productList.append($products);
            }

            // Search button click handler
            $('#search-btn').on('click', function() {
                searchQuery = $('#product-search').val().trim();
                filterProducts();
            });

            // Search input keyboard handler (search as you type)
            $('#product-search').on('keyup', function(e) {
                // Search on Enter key
                if (e.keyCode === 13) {
                    searchQuery = $(this).val().trim();
                    filterProducts();
                }
            });

            // Category filter change handler
            $('#category-filter').on('change', function() {
                selectedCategory = $(this).val();
                filterProducts();
            });

            // Sort change handler
            $('#sort-products').on('change', function() {
                currentSort = $(this).val();
                sortProducts(currentSort);
            });

            // Reset filters button
            $('#reset-filters').on('click', function() {
                // Reset all filters
                searchQuery = '';
                selectedCategory = '';
                currentSort = 'default';

                // Reset UI
                $('#product-search').val('');
                $('#category-filter').val('');
                $('#sort-products').val('default');

                // Show all products
                $('.product-item').show();
                $('#no-results').hide();
            });

            // Check if products are in wishlist (for authenticated users)
            function checkWishlistStatus() {
                // Only if user is authenticated
                @if (Session["UserId"] != null)
                {
                    <text>
                    $('.wishlist-form').each(function() {
                        var form = $(this);
                        var productId = form.data('product-id');
                        var wishlistBtn = form.find('.btn-wishlist');

                        // Check if the product is in the wishlist
                        $.ajax({
                            url: '@Url.Action("Check", "Wishlist")',
                            type: 'GET',
                            data: { productId: productId },
                            success: function(data) {
                                if (data.success && data.isInWishlist) {
                                    // If it's in the wishlist, change the icon and style
                                    wishlistBtn.html('<i class="fas fa-heart"></i>');
                                    wishlistBtn.addClass('in-wishlist');
                                }
                            }
                        });
                    });
                    </text>
                }
            }

            // Run initial check
            checkWishlistStatus();

            // Add CSS for wishlist button
            $('<style>')
                .prop('type', 'text/css')
                .html(`
                    .product-card-img { position: relative; }
                    .wishlist-icon {
                        position: absolute;
                        top: 10px;
                        right: 10px;
                        z-index: 10;
                    }
                    .btn-wishlist {
                        background-color: white;
                        border: none;
                        border-radius: 50%;
                        width: 40px;
                        height: 40px;
                        display: flex;
                        align-items: center;
                        justify-content: center;
                        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
                        transition: all 0.3s;
                    }
                    .btn-wishlist i {
                        color: #999;
                        font-size: 18px;
                        transition: all 0.3s;
                    }
                    .btn-wishlist:hover i {
                        color: #ff4136;
                    }
                    .btn-wishlist.in-wishlist i {
                        color: #ff4136;
                    }
                `)
                .appendTo('head');
        });
    </script>
}
